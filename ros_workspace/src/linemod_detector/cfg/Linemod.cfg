#!/usr/bin/env python
# vim: set fenc=utf-8 et sts=4 ft=python :
PACKAGE = "linemod_detector"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("bms_opening_width", int_t, 0, "BMS opening width", 3, 1, 15)
gen.add("bms_dilation_width_1", int_t, 0, "BMS dilation width 1", 1, 1, 10)
gen.add("bms_dilation_width_2", int_t, 0, "BMS dilation width 2", 1, 1, 10)
gen.add("bms_normalize", bool_t, 0, "Use L2 normalization for BMS", True)
gen.add("bms_handle_border", bool_t, 0, "Handle image borders", False)
gen.add("bms_sample_step", int_t, 0, "BMS sample step", 8, 1, 10)

gen.add("bms_thresh", int_t, 0, "Post BMS threshold", 50, 0, 255)
gen.add("bms_thresh_on", bool_t, 0, "Threshold BMS Map", True)
gen.add("bms_img_width", double_t, 0, "Width of computed BMS image in pixels", 200, 10, 4000)

gen.add("minDistBetweenBlobs", double_t, 0, "Minimum pixel spacing between blobs", 15, 0, 100)

gen.add("filterByColor", bool_t, 0, "Filter blobs by color", True)

gen.add("filterByArea", bool_t, 0, "Filter blobs by area", True)
gen.add("minArea", double_t, 0, "Minimum blob area, in pixels", 50, 100, 10000)
gen.add("maxArea", double_t, 0, "Maximum blob area, in pixels", 100, 10000, 20000)

gen.add("filterByConvexity", bool_t, 0, "Filter blobs by convexity", True)
gen.add("minConvexity", double_t, 0, "Minimum blob convexity ratio", 0.7, 0, 1.0)
gen.add("maxConvexity", double_t, 0, "Maximum blob convexity ratio", 1.0, 0, 1.0)

gen.add("blobColor", int_t, 0, "Color of blob to extract", 255, 0, 255)
gen.add("minThreshold", double_t, 0, "Min blob threshold", 10, 1, 255)
gen.add("maxThreshold", double_t, 0, "Max blob threshold", 50, 1, 255)
gen.add("thresholdStep", double_t, 0, "Threshold step size", 10, 1, 255)
gen.add("minRepeatability", double_t, 0, "Min repeatability", 2, 1, 255)

gen.add("pub_threshold", double_t, 0, "Match Score to publish", 90, 0, 100)
gen.add("target_width", int_t, 0, "Image width to resize patches to", 130, 0, 400)

exit(gen.generate(PACKAGE, "linemod_detector", "Linemod"))
