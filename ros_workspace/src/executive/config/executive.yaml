#camera ignore params, to allow testing without certain cameras
executive_master:
    ignore_search_camera: True
    ignore_manipulator_camera: True
        
level_two:
    #all values in degrees and meters
    move_velocity: 0.8 
    spin_velocity: 0.3
    return_time_minutes: 110 
    #dismount and beacon approach
    dismount_move: {angle: 0, distance: 6.0, velocity: 0.5}
    beacon_approach_point: {x: 6.0, y: 0}
    platform_point: {x: -0.9, y: 0.0}
    beacon_observation_delay: 4 
    beacon_calibration_delay: 10
    gyro_calibration_delay: 10
    beacon_mount_tolerance: 0.02 #correction must be less than this before mount
    #if a planned point has changed more than this, replan.
    #if greater than recalibrate, wait and observe beacon, and set gyro bias
    replan_threshold: 2.0
    recalibrate_threshold: 5.0    
    #for costmap issues, set to zero to disable this
    blocked_retry_delay: 3.0
  
    #search shape parameters
    spoke_hub_radius: 15
    raster_step: 5
    raster_tolerance: 1.5 #close enough to next point?
    chord_course_tolerance: 4.0 #what is off course on a chord move
  
    #Slices are the angular extent between a start spoke and end spoke.
    #Angles are specified in degrees from initial facing.  0 degrees is
    #specified as the robot facing the Reference Point in the WPI
    #localization map.  Slices also specify a maximum and minimum radius

    web_slices: [
        { start_angle: 355, end_angle: 15, min_radius: 33, max_radius: 44, return_on_end: True },
        { start_angle: 80, end_angle: 60, min_radius: 34, max_radius: 45, return_on_end: True },
        { start_angle: 133, end_angle: 106, min_radius: 59, max_radius: 88, return_on_end: True },
        { start_angle: 126, end_angle: 146, min_radius: 38, max_radius: 49, return_on_end: True },
        { start_angle: 138, end_angle: 156, min_radius: 103, max_radius: 129, return_on_end: True },
        { start_angle: 192, end_angle: 212, min_radius: 27, max_radius: 38, return_on_end: True },
        { start_angle: 157, end_angle: 167, min_radius: 107, max_radius: 118, return_on_end: False },
        { start_angle: 309, end_angle: 329, min_radius: 31, max_radius: 41, return_on_end: True },
        { start_angle: 328, end_angle: 338, min_radius: 67, max_radius: 78, return_on_end: True },
        { start_angle: 325, end_angle: 315, min_radius: 89, max_radius: 100, return_on_end: False },
        { start_angle: 342, end_angle: 352, min_radius: 100, max_radius: 111, return_on_end: True },
        { start_angle: 359, end_angle: 18, min_radius: 128, max_radius: 172, return_on_end: False }
    ]

pursue_sample:
    #sample approach (pursuit) parameters
    pursuit_velocity: 0.8
    spin_velocity: 0.3
    max_pursuit_error: 0.5
    min_pursuit_distance: 1.2
    #if sample is closer than this, strafe to approach point
    simple_pursuit_threshold: 1.5 
    #after min_pursuit reached, we move to check_distance, wait settle_time
    #and check for obstacles.  Then we make the manipulator view approach.
    settle_time: 4.0
    sample_obstacle_check_width: 0.6
    final_pursuit_step: 0.4
    spiral_search_step: 0.15 
    search_velocity: 0.05
