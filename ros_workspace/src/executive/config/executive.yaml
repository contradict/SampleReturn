#camera ignore params, to allow testing without certain cameras
executive_master:
    ignore_search_camera: True
    ignore_manipulator_camera: True
        
level_two:
    #all values in degrees and meters
    move_velocity: 0.8 
    raster_velocity: 0.6
    spin_velocity: 0.3
    return_time_minutes: 110 
    
    #initial move params (same as recovery)
    initial_behavior:
        announcement: 'Entering level two mode.'
        simple_moves: [
            { angle: 0.0, distance: 6.0, velocity: 0.5 },
            { angle: 180.0, velocity: 0.3 },
            { angle: 180.0, distance: 3.0, velocity: 0.1 }
        ]
        beacon_enabled_on_entry: true
        search_enabled_on_entry: false
        time_offset: 0
        terminal_outcome: web_manager

    beacon_approach_point: {x: 6.0, y: 0}
    platform_point: {x: -0.8, y: 0.0}
    beacon_observation_delay: 5 
    beacon_calibration_delay: 30
    beacon_mount_tolerance: 0.02 #correction must be less than this before mount
    #if a planned point has changed more than this, replan.
    #if greater than recalibrate, wait and observe beacon, and set gyro bias
    replan_threshold: 2.0
    recalibrate_threshold: 5.0
    #for costmap issues, set to zero to disable this
    blocked_retry_delay: 3.0
  
    #search shape parameters
    spoke_hub_radius: 15
    raster_step: 4
    raster_tolerance: 1.5 #close enough to next point?
    chord_course_tolerance: 3.0 #what is off course on a chord move
  
    #Slices are the angular extent between a start spoke and end spoke.
    #Angles are specified in degrees from initial facing.  0 degrees is
    #specified as the robot facing the Reference Point in the WPI
    #localization map.  Slices also specify a maximum and minimum radius

    web_slices: [
        { start_angle: 355, end_angle: 15, min_radius: 33, max_radius: 44, return_on_end: True },
        { start_angle: 80, end_angle: 60, min_radius: 35, max_radius: 45, return_on_end: True },
        { start_angle: 109, end_angle: 121, min_radius: 58, max_radius: 70, return_on_end: True },
        { start_angle: 123, end_angle: 133, min_radius: 77, max_radius: 87, return_on_end: True },
        { start_angle: 126, end_angle: 146, min_radius: 37, max_radius: 47, return_on_end: True },
        { start_angle: 138, end_angle: 156, min_radius: 103, max_radius: 129, return_on_end: True },
        { start_angle: 192, end_angle: 212, min_radius: 26, max_radius: 36, return_on_end: True },
        { start_angle: 157, end_angle: 167, min_radius: 108, max_radius: 118, return_on_end: False },
        { start_angle: 309, end_angle: 329, min_radius: 31, max_radius: 41, return_on_end: True },
        { start_angle: 328, end_angle: 338, min_radius: 68, max_radius: 78, return_on_end: True },
        { start_angle: 315, end_angle: 325, min_radius: 90, max_radius: 100, return_on_end: True },
        { start_angle: 342, end_angle: 352, min_radius: 101, max_radius: 111, return_on_end: True },
        { start_angle: 359, end_angle: 17, min_radius: 131, max_radius: 148, return_on_end: False },
        { start_angle: 5, end_angle: 18, min_radius: 166, max_radius: 176, return_on_end: False }
    ]

pursue_sample:
    #sample approach (pursuit) parameters
    pursuit_velocity: 0.4
    spin_velocity: 0.3
    max_pursuit_error: 0.5
    min_pursuit_distance: 1.5
    #if sample is closer than this, strafe to approach point
    simple_pursuit_threshold: 1.5 
    #after min_pursuit reached, we move to check_distance, wait settle_time
    #and check for obstacles.  Then we make the manipulator view approach.
    settle_time: 3.0
    sample_obstacle_check_width: 0.6
    final_pursuit_step: 0.2
    spiral_search_step: 0.15 
    search_velocity: 0.05
    available_bins: [1,2,3,4,5,6,7,8,9,10]
