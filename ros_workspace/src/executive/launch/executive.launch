<?xml version="1.0"?>
<!-- vim: set fenc=utf-8 et sts=4 ft=xml : -->
<launch>

    <!-- IMPORTANT! For tf, this is the frame that the executive works in, -->
    <!-- and planner mode defines what all executive nodes use for planned motion -->
    <arg name="world_fixed_frame" default="map"/>
    <arg name="odometry_frame" default="odom"/>
    <arg name="planner_mode" value="MODE_PLANNER_TWIST"/>

    <!-- executive behaviour parameters -->
    <arg name="executive_config"/>
    <rosparam file="$(arg executive_config)" command="load" ns="processes/executive/"/>  
    
    <param name="/processes/executive/odometry_frame" value="$(arg odometry_frame)"/>
    <param name="/processes/executive/world_fixed_frame" value="$(arg world_fixed_frame)"/>

    <!-- motion remaps -->
    <remap from="CAN_select_motion_mode" to="/motion/CAN/select_motion_mode"/>
    <remap from="CAN_status_word" to="/motion/CAN/status_word"/>
    <remap from="twist" to="/motion/planner_command"/>
    <remap from="manipulator_action" to="/motion/manipulator/grab_action"/>
    <remap from="odometry" to="/motion/odometry"/>
    <remap from="platform_joint_state" to="/motion/platform_joint_state"/>

    <!-- planning and detection remaps -->
    <remap from="DWAPlanner_set_parameters" to="/planner/mover/DWAPlannerROS/set_parameters"/>
    <remap from="local_costmap" to="/processes/planner/dumb/local_costmap/costmap/costmap"/>
    <remap from="planner_command" to="/processes/planner/command"/>        
    <remap from="planner_move_base" to="/processes/planner/move_base"/>        
    <remap from="detected_sample_manipulator" to="/processes/sample_detection/manipulator/filtered_point"/>
    <remap from="detected_sample_search" to="/processes/sample_detection/search/filtered_point"/>
    <remap from="enable_manipulator_detector" to="/processes/sample_detection/manipulator/enable"/>
    <remap from="beacon_pose" to="/processes/beacon/beacon_pose"/>
    <remap from="visual_servo_action" to="/processes/visual_servo/servo_action"/>
    <remap from="vfh_move" to="/processes/vfh_move"/>
    <remap from="simple_move" to="/processes/simple_move"/>
    <remap from="obstacle_check" to="/processes/obstacle_check"/>

    <!-- io remaps -->
    <remap from="pause_state" to="/io/pause_state"/>
    <remap from="announcer" to="/io/announcer"/>
    <remap from="audio_search" to="/io/audio/search"/>
    <remap from="audio_navigate" to="/io/audio/navigate"/>
    <remap from="gpio_read" to="/io/gpio_read"/>

    <node
        pkg="executive"
        type="executive_master_node.py"
        name="executive_master"
        machine="navigate"
        output="log"
        ns="/processes/executive">

        <param name="gpio_servo_id" value="1"/>
        <param name="GPIO_PIN_LEVEL_ONE" value="0x20"/>   
        <param name="GPIO_PIN_LEVEL_TWO" value="0x08"/>   
        
        <remap from="navigation_port_camera_status" to="/cameras/navigation/port/status"/>
        <remap from="navigation_center_camera_status" to="/cameras/navigation/center/status"/>
        <remap from="navigation_starboard_camera_status" to="/cameras/navigation/starboard/status"/>
        <remap from="manipulator_camera_status" to="/cameras/manipulator/status"/>
        <remap from="search_camera_status" to="/cameras/search/status"/>

        <remap from="home_wheel_pods" to="/motion/wheel_pods/home"/>
        <remap from="home_carousel" to="/motion/carousel/home"/>
        <remap from="manual_control" to="/processes/manual_control"/>

        <remap from="gpio_read" to="/io/gpio_read"/>
    </node>

    <node
        pkg="executive"
        type="level_two_node.py"
        name="level_two_star"
        machine="navigate"
        output="log"
        ns="/processes/executive">

        <remap from="enable_search" to="/cameras/search/enable"/>
        
        <!-- executive tf frame and planner_mode -->
        <param name="planner_mode" type="string" value="$(arg planner_mode)"/>
    </node>
        
    <node
        pkg="executive"
        type="pursue_sample_node.py"
        name="pursue_sample"
        machine="navigate"
        output="log"
        ns="/processes/executive">

        <!-- remaps -->
        <remap from="search_lights" to="search_lights"/>

        <!-- executive tf frame and planner_mode -->
        <param name="planner_mode" type="string" value="$(arg planner_mode)"/>
       
        <!-- this file loads the velocities and such for servoing onto sample,
             the node must already have a simple_mover up and running -->
        <rosparam file="$(find samplereturn)/config/visual_servo.yaml" command="load"/>  
    </node>

</launch>
