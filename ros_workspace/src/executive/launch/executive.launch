<?xml version="1.0"?>
<!-- vim: set fenc=utf-8 et sts=4 ft=xml : -->
<launch>

    <!-- IMPORTANT! For tf, this is the frame that the executive works in, -->
    <!-- and planner mode defines what all executive nodes use for planned motion -->
    <arg name="executive_frame" value="/odom"/>
    <arg name="planner_mode" value="MODE_PLANNER_TWIST"/>
    
    <!-- motion remaps -->
    <remap from="CAN_select_motion_mode" to="/motion/CAN/select_motion_mode"/>
    <remap from="CAN_status_word" to="/motion/CAN/status_word"/>
    <remap from="joystick_command" to="/motion/joystick_command"/>
    <remap from="servo_command" to="/motion/servo_command"/>
    <remap from="planner_command" to="/motion/planner_command"/>
    <remap from="manipulator_action" to="/motion/manipulator/grab_action"/>
    <remap from="odometry" to="/motion/odometry"/>
    <remap from="platform_joint_state" to="/motion/platform_joint_state"/>

    <!-- planning and detection remaps -->
    <remap from="DWAPlanner_set_parameters" to="/planner/mover/DWAPlannerROS/set_parameters"/>
    <remap from="local_costmap" to="/processes/planner/dumb/local_costmap/costmap/costmap"/>
    <remap from="planner_command" to="/processes/planner/command"/>        
    <remap from="planner_move_base" to="/processes/planner/move_base"/>        
    <remap from="detected_sample_manipulator" to="/processes/sample_detection/manipulator/filtered_point"/>
    <remap from="detected_sample_search" to="/processes/sample_detection/search/filtered_point"/>
    <remap from="enable_manipulator_detector" to="/processes/sample_detection/manipulator/enable"/>
    <remap from="beacon_pose" to="/processes/beacon_finder/beacon_pose"/>
    <remap from="visual_servo_action" to="/processes/visual_servo/servo_action"/>

    <!-- io remaps -->
    <remap from="pause_state" to="/io/pause_state"/>
    <remap from="announcer" to="/io/announcer"/>
    <remap from="audio_search" to="/io/audio/search"/>
    <remap from="audio_navigate" to="/io/audio/navigate"/>
    <remap from="gpio_read" to="/io/gpio_read"/>

    <!-- dictionary for dumb planning, costmap_checker
         also uses this to determine where to check for obstacles.
         The angles must not be changed for proper block checking,
         but the distances can be overridden by nodes-->
    <rosparam ns="/processes/executive">
        strafes:
            left:
                angle: 0.7854
                distance: 4.0
                blocked: False
                right_check_offset: 1.5     
            center:
                angle: 0
                distance: 10.0
                blocked: False                
            right:
                angle: -0.7854
                distance: 4.0
                blocked: Falsei
                left_check_offset: 1.5
    </rosparam>

    <node
        pkg="executive"
        type="executive_master_node.py"
        name="executive_master"
        machine="navigate"
        output="log"
        ns="/processes/executive">

        <param name="gpio_servo_id" value="1"/>
        <param name="GPIO_PIN_LEVEL_ONE" value="0x20"/>   
        <param name="GPIO_PIN_LEVEL_TWO" value="0x08"/>   

        <!-- camera ignore params, to allow testing without certain cameras -->
        <param name="ignore_search_camera" value="True"/>
        <param name="ignore_manipulator_camera" value="True"/>
        
        <remap from="navigation_port_camera_status" to="/cameras/navigation/port/status"/>
        <remap from="navigation_center_camera_status" to="/cameras/navigation/center/status"/>
        <remap from="navigation_starboard_camera_status" to="/cameras/navigation/starboard/status"/>
        <remap from="manipulator_camera_status" to="/cameras/manipulator/status"/>
        <remap from="search_camera_status" to="/cameras/search/status"/>

        <remap from="home_wheel_pods" to="/motion/wheel_pods/home"/>
        <remap from="home_carousel" to="/motion/carousel/home"/>
        <remap from="manual_control" to="/motion/manual_control"/>

        <remap from="gpio_read" to="/io/gpio_read"/>
    </node>

    <!--
    <node
        pkg="executive"
        type="level_one_node.py"
        name="level_one"
        machine="navigate"
        output="log"
        ns="/processes/executive">
        
        <!- - executive tf frame and planner_mode - ->
        <param name="executive_frame" type="string" value="$(arg executive_frame)"/>
        <param name="planner_mode" type="string" value="$(arg planner_mode)"/>
        
        <!- - for DriveToPose states and approach to sample- ->
        <param name="velocity" type="double" value="1.5"/>
        <param name="search_velocity" type="double" value="0.5"/>
        <param name="motion_check_interval" type="double" value="60"/>
        <param name="min_motion" type="double" value="0.5"/>
        <rosparam>
            <!- - Specify x and y.  If yaw is unspecified, robot will point towards
                 the next point in the path list - ->
            search_poses_2d:
                - {x: 2.0, y: 0.0}
                - {x: 4.0, y: -2.0}
                - {x: 10.0, y: -10.0}
        </rosparam>        
        <!- - for Beacon approach - ->
        <param name="min_pursuit_distance" type="double" value="3.0"/>
        <param name="max_pursuit_error" type="double" value="0.3"/>
        <param name="max_point_lost_time" type="double" value="60"/>
        <rosparam>
            beacon_approach_point:
                {x: 8.0, y: 0, yaw: 180}
        </rosparam>
    </node>
    -->

    <node
        pkg="executive"
        type="level_two_node.py"
        name="level_two_star"
        machine="navigate"
        output="log"
        ns="/processes/executive">

        <!-- executive tf frame and planner_mode -->
        <param name="executive_frame" type="string" value="$(arg executive_frame)"/>
        <param name="planner_mode" type="string" value="$(arg planner_mode)"/>
        
        <!-- for search  behaviour --> 
        <param name="return_time_minutes" type="double" value="100"/>

        <!-- for Beacon approach -->
        <param name="min_pursuit_distance" type="double" value="3.0"/>
        <param name="max_pursuit_error" type="double" value="0.3"/>
        <param name="max_point_lost_time" type="double" value="60"/>
        <rosparam>
            beacon_approach_point:
                {x: 5.0, y: 0, yaw: 180}
        </rosparam>

        <!-- simple mover parameters --> 
        <param name="spin_velocity" type="double" value="0.4"/>
        <!-- default for simple move execute -->  
        <rosparam>
            simple_motion_params:
                max_velocity: 1.0
                acceleration: 0.5
                stop_deceleration: 2.0
                loop_rate: 10 
                steering_angle_epsilon: 0.01
        </rosparam>
    
    </node>
        
    <node
        pkg="executive"
        type="pursue_sample_node.py"
        name="pursue_sample"
        machine="navigate"
        output="log"
        ns="/processes/executive">

        <!-- remaps -->
        <remap from="search_lights" to="search_lights"/>

        <!-- executive tf frame and planner_mode -->
        <param name="executive_frame" type="string" value="$(arg executive_frame)"/>
        <param name="planner_mode" type="string" value="$(arg planner_mode)"/>
        
        <param name="min_pursuit_distance" type="double" value="2.5"/>
        <param name="max_pursuit_error" type="double" value="0.2"/>
        <param name="max_sample_lost_time" type="double" value="60"/>
        <param name="square_search_size" type="double" value="0.3"/> 
        <param name="pursuit_step" type="double" value="3.0"/>
        <param name="pursuit_velocity" type="double" value="0.5"/>
        <param name="search_velocity" type="double" value="0.25"/>

        <!-- manipulator correction, measured manually, corrects for inaccuracy of reality -->
        <rosparam>
            manipulator_correction:
                x: -0.012
                y: 0.022
        </rosparam>

        <!-- pursue sample simple motion parameters --> 
        <!-- these are defaults and should be overridden as necessary -->
        <rosparam>
           simple_motion_params:
                max_velocity: 0.5
                acceleration: 0.5
                stop_deceleration: 1.0
                loop_rate: 10
                steering_angle_epsilon: 0.01
         </rosparam>

        <!-- servo sample simple motion parameters -->
        <rosparam>
           servo_params:
              initial_velocity: 0.1
              initial_tolerance: 0.050
              final_velocity: 0.005
              final_tolerance: 0.010
              acceleration: 0.02
              try_limit: 3
        </rosparam>

    </node>

    <node
        pkg="executive"
        type="costmap_checker_node.py"
        name="costmap_checker"
        machine="navigate"
        output="log"
        ns="/processes/executive">

        <!-- executive tf frame and planner_mode -->
        <param name="executive_frame" type="string" value="$(arg executive_frame)"/>

        <param name="lethal_threshold" type="int" value="90"/>        
        <param name="obstacle_check_distance" type="double" value="5"/>
        <param name="obstacle_check_width" type="double" value="2.2"/>

    </node>

</launch>
