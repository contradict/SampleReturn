<?xml version="1.0"?>
<!-- vim: set fenc=utf-8 et sts=4 ft=xml : -->
<launch>
    
    <machine name="search"
             address="localhost"/>
    <machine name="navigate"
             address="localhost"/>
     
    <remap from="CAN_select_motion_mode" to="/motion/CAN/select_motion_mode"/>
    <remap from="CAN_status_word" to="/motion/CAN/status_word"/>
    <remap from="servo_command" to="/motion/servo_command"/>
    <remap from="joystick_command" to="/motion/joystick_command"/>
    <remap from="local_costmap" to="/processes/planner/mover/local_costmap/costmap"/>
        
    <remap from="DWAPlanner_set_parameters" to="/planner/mover/DWAPlannerROS/set_parameters"/>
    <remap from="planner_command" to="/processes/planner/command"/>        
    <remap from="planner_move_base" to="/processes/planner/move_base"/>        
    <remap from="detected_sample_manipulator" to="/processes/sample_detection/manipulator/point"/>
    <remap from="detected_sample_search" to="/processes/sample_detection/search/point"/>
    <remap from="enable_manipulator_detector" to="/processes/sample_detection/manipulator/enable"/>

    <remap from="beacon_pose" to="/processes/beacon_finder/beacon_pose"/>
    <remap from="visual_servo_action" to="/processes/visual_servo/servo_action"/>
    <remap from="manipulator_action" to="/motion/manipulator/grab_action"/>

    <remap from="announcer" to="/io/announcer"/>
    <remap from="audio_search" to="/io/audio/search"/>
    <remap from="audio_navigate" to="/io/audio/navigate"/>

    <node
        pkg="executive"
        type="executive_master_node.py"
        name="executive_master"
        output="log"
        ns="/processes/executive">

        <param name="gpio_servo_id" value="1"/>
        <param name="GPIO_PIN_LEVEL_ONE" value="0x20"/>   
        <param name="GPIO_PIN_LEVEL_TWO" value="0x08"/>   

        <remap from="navigation_port_camera_status" to="/cameras/navigation/port/status"/>
        <remap from="navigation_center_camera_status" to="/cameras/navigation/center/status"/>
        <remap from="navigation_starboard_camera_status" to="/cameras/navigation/starboard/status"/>
        <remap from="manipulator_camera_status" to="/cameras/manipulator/status"/>
        <remap from="search_camera_status" to="/cameras/search/status"/>

        <remap from="home_wheel_pods" to="/motion/wheel_pods/home"/>
        <remap from="home_carousel" to="/motion/carousel/home"/>
        <remap from="manual_control" to="/motion/manual_control"/>

        <remap from="gpio_read" to="/io/gpio_read"/>
        <remap from="pause_state" to="/io/pause_state"/>
    </node>

    <node
        pkg="executive"
        type="level_one_node.py"
        name="level_one"
        output="log"
        ns="/processes/executive">

        <param name="min_pursuit_distance" type="double" value="3.0"/>
        <param name="max_pursuit_error" type="double" value="0.3"/>
        <param name="max_point_lost_time" type="double" value="60"/>
        <param name="motion_check_interval" type="double" value="60"/>
        <param name="min_motion" type="double" value="0.5"/>
        
        <rosparam>
            <!-- Specify x and y.  If yaw is unspecified, robot will point towards
                 the next point in the path list -->
            search_poses_2d:
                - {x: 5.0, y: 0.0}
                - {x: 10.0, y: -10.0}
                - {x: 12.0, y: -15.0}
                - {x: 8.0, y: -25.0}
            beacon_approach_point:
                {x: 5.0, y: 0, yaw: 180}
        </rosparam>
    
    </node>

    <node
        pkg="executive"
        type="level_two_node.py"
        name="level_two"
        output="log"
        ns="/processes/executive">

        <param name="min_pursuit_distance" type="double" value="3.0"/>
        <param name="max_pursuit_error" type="double" value="0.3"/>
        <param name="max_sample_lost_time" type="double" value="30"/>
        <param name="return_time_minutes" type="double" value="20"/>
        <param name="line_plan_step" type="double" value="8"/>
        <param name="line_replan_distance" type="double" value="1"/>
        <param name="line_velocity" type="double" value="1.5"/>
        <param name="blocked_check_distance" type="double" value="10"/>
        <param name="blocked_check_width" type = "double" value="3"/>
        <param name="blocked_rotation" type="double" value="120"/>
        <param name="blocked_rotation_step" type="double" value="15"/>
        <param name="motion_check_interval" type="double" value="20"/>
        <param name="min_motion" type="double" value="0.5"/>

        <rosparam>
            beacon_approach_point:
                {x: 5.0, y: 0, yaw: 180}
        </rosparam>
    </node>
        
    <node
        pkg="executive"
        type="pursue_sample_node.py"
        name="pursue_sample"
        output="log"
        ns="/processes/executive">
    
        <param name="min_pursuit_distance" type="double" value="4.0"/>
        <param name="max_pursuit_error" type="double" value="0.3"/>
        <param name="max_sample_lost_time" type="double" value="30"/>
        <param name="motion_check_interval" type="double" value="30"/>
        <param name="min_motion" type="double" value="0.5"/>
        <param name="square_search_size" type="double" value="0.3"/>

    </node>

    <node
        name="navigate_audio"
        pkg="sound_play"
        type="soundplay_node.py"
        ns="/io/audio">
        <remap from="robotsound" to="navigate_soundplay"/>
    </node>
    
    <include file="$(find samplereturn)/launch/joystick.launch"/>

    <include file="$(find samplereturn)/launch/planner.launch">
        <arg name="map_config" value="maps/map_park_fake.yaml"/>
    </include>
        
    <node
        name="navigate_announcer"
        pkg="samplereturn"
        type="announcer.py"
        ns="/io/audio">
        <remap from="audio_in" to="navigate"/>
        <remap from="audio_out" to="navigate_soundplay"/>
    </node>

    <!-- joint state publishing -->
    <param name="robot_description"
           command="$(find xacro)/xacro.py '$(find samplereturn)/urdf/robot.xacro'" />

    <node name="state_publisher"
          pkg="robot_state_publisher" 
          type="robot_state_publisher"
          output="log"
          ns="/motion">
        <remap from="joint_states" to="platform_joint_state"/>
        <param name="publish_frequency" type="double" value="10"/>

    </node>
    
</launch>
