<?xml version="1.0"?>
<!-- vim: set fenc=utf-8 et sts=4 ft=xml : -->
<launch>

    <arg name="odometry_frame" value="fake_odom"/>
    <arg name="world_fixed_frame" value="fake_map"/>
    <arg name="beacon_localization" value="false"/>

    <!-- begin test arguments -->
    <machine name="search"
             address="localhost"/>
    <machine name="navigate"
             address="localhost"/>
    <!-- end test arguments -->
    
    <include file="$(find executive)/launch/executive.launch">
        <arg name="odometry_frame" value="$(arg odometry_frame)"/>
        <arg name="world_fixed_frame" value="$(arg world_fixed_frame)"/>
    </include>

    <!-- crap below here is for test only -->

    <node
        name="navigate_audio"
        pkg="sound_play"
        type="soundplay_node.py"
        ns="/io/audio">
        <remap from="robotsound" to="search_soundplay"/>
    </node>
    
    <include file="$(find samplereturn)/launch/joystick.launch"/>

    <include file="$(find samplereturn)/launch/planner_dumb.launch">
        <arg name="odometry_frame" value="$(arg odometry_frame)"/>
    </include>

    <arg name="map_config" value="maps/map_park_fake.yaml"/>
    <node
        name="map_server"
        pkg="map_server"
        type="map_server"
        ns="/processes/planner"
        output="log"
        args="$(find samplereturn)/$(arg map_config)"
        >
    </node>

    <node
        name="navigate_announcer"
        pkg="samplereturn"
        type="announcer.py"
        ns="/io/audio">
        <remap from="audio_in" to="search"/>
        <remap from="audio_out" to="search_soundplay"/>
    </node>

    <!-- joint state publishing -->
    <param name="robot_description"
           command="$(find xacro)/xacro.py '$(find samplereturn)/urdf/robot.xacro'" />

    <node name="state_publisher"
          pkg="robot_state_publisher" 
          type="robot_state_publisher"
          output="log"
          ns="/motion">
        <remap from="joint_states" to="platform_joint_state"/>
        <param name="publish_frequency" type="double" value="10"/>

    </node>

    <node name="vfh_driver"
          pkg="motion_planning" 
          type="vfh_driving.py"
          output="log"
          ns="/processes">

        <param name="odometry_frame" value="$(arg odometry_frame)"/>

        <remap from="odometry" to="/motion/odometry"/>
        <remap from="local_costmap" to="/processes/planner/dumb/local_costmap/costmap/costmap"/>
        <remap from="twist" to="/motion/planner_command"/>
        <remap from="platform_joint_state" to="/motion/platform_joint_state"/>
        
        <rosparam>
            simple_motion_params:
                max_velocity: 0.8
                acceleration: 0.5
                stop_deceleration: 2.0
                loop_rate: 10 
                steering_angle_epsilon: 0.01
        </rosparam>

    </node>

    <include file="$(find beacon_finder)/launch/beacon_finder.launch">
        <arg name="world_fixed_frame" value="$(arg world_fixed_frame)"/>
    </include>

    <group if="$(arg beacon_localization)">
        <include file="$(find beacon_localizer)/launch/beacon_localizer.launch">
            <arg name="world_fixed_frame" value="$(arg world_fixed_frame)"/>
            <arg name="odometry_frame" value="$(arg odometry_frame)"/>
        </include>
</group>
<!-- <group unless="$(arg beacon_localization)">
        <node
            pkg="fake_localization"
            type="fake_localization"
            name="fake_localization"
            ns="/processes">
            <remap from="base_pose_ground_truth" to="/motion/odometry"/>

            <param name="odom_frame_id" value="$(arg odometry_frame)"/>
            <param name="global_frame_id" value="$(arg world_fixed_frame)"/>
        </node>
    </group>-->

</launch>
