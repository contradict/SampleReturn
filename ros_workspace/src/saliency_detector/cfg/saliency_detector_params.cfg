#!/usr/bin/env python
PACKAGE = "saliency_detector"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("debug_output", bool_t, 0, "Publish debug images", False)
#gen.add("img_topic", str_t, 0, "A string parameter", "Hello World")

gen.add("bms_sample_step", int_t, 0, "BMS sample step", 8, 1, 10)
gen.add("bms_opening_width", int_t, 0, "BMS opening width", 13, 1, 15)
gen.add("bms_dilation_width_1", int_t, 0, "BMS dilation width 1", 1, 1, 10)
gen.add("bms_dilation_width_2", int_t, 0, "BMS dilation width 2", 1, 1, 10)
gen.add("bms_blur_std", double_t, 0, "BMS blur size", 0, 0, 10)
gen.add("bms_normalize", bool_t, 0, "Use L2 normalization for BMS", True)
gen.add("bms_handle_border", bool_t, 0, "Handle image borders", False)

gen.add("bms_thresh", int_t, 0, "Post BMS threshold", 150, 0, 255)
gen.add("bms_thresh_on", bool_t, 0, "Threshold BMS Map", False)
gen.add("bms_top_trim", double_t, 0, "Pixels from the top of the horizon to ignore", 500, 0, 1000)

#gen.add("color_name_file", str_t, 0, "File to load for color names", "")
#gen.add("sample_file", str_t, 0, "File to load for sample definitions", "")

gen.add("blobDetect_on", bool_t, 0, "Run blob detect", True)

gen.add("filterByColor", bool_t, 0, "Filter blobs by color", True)
gen.add("filterByArea", bool_t, 0, "Filter blobs by area", False)
gen.add("filterByConvexity", bool_t, 0, "Filter blobs by convexity", False)
gen.add("filterByCircularity", bool_t, 0, "Filter blobs by circularity", False)
gen.add("filterByInertia", bool_t, 0, "Filter blobs by inertia", False)

gen.add("blobColor", int_t, 0, "Color of blob to extract", 255, 0, 255)
gen.add("minThreshold", double_t, 0, "Min blob threshold", 60, 1, 255)
gen.add("maxThreshold", double_t, 0, "Min blob threshold", 200, 1, 255)

#size_enum = gen.enum([ gen.const("Small", int_t, 0, "A small constant"),
#                  gen.const("Medium", int_t, 1, "A medium constant"),
#                  gen.const("Large", int_t, 2, "A large constant"),
#                  gen.const("ExtraLarge", int_t, 3, "An extra large constant") ],
#                  "An enum to set size")
#
#gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "saliency_detector", "saliency_detector_params"))
