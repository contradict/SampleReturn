#!/usr/bin/env python
# vim: set syntax=python :

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, double_t, int_t, bool_t, str_t
from numpy import pi

gen = ParameterGenerator()

models = gen.enum([
        gen.const("SACMODEL_PLANE", int_t, 0, "Plane"),
        gen.const("SACMODEL_LINE", int_t, 1, "Line"),
        gen.const("SACMODEL_CIRCLE2D", int_t, 2, "Circle2D"),
        gen.const("SACMODEL_CIRCLE3D", int_t, 3, "Circle3D"),
        gen.const("SACMODEL_SPHERE", int_t, 4, "Sphere"),
        gen.const("SACMODEL_CYLINDER", int_t, 5, "Cylinder"),
        gen.const("SACMODEL_CONE", int_t, 6, "Cone"),
        gen.const("SACMODEL_TORUS", int_t, 7, "Torus"),
        gen.const("SACMODEL_PARALLEL_LINE", int_t, 8, "Parallel Line"),
        gen.const("SACMODEL_PERPENDICULAR_PLANE", int_t, 9, "Perpendicular Plane"),
        gen.const("SACMODEL_PARALLEL_LINES", int_t, 10, "Parallel Lined"),
        gen.const("SACMODEL_REGISTRATION", int_t, 13, "Registration"),
        gen.const("SACMODEL_REGISTRATION_2D", int_t, 14, "Registration 2D"),
        gen.const("SACMODEL_PARALLEL_PLANE", int_t, 15, "Parallel Plane"),
        gen.const("SACMODEL_STICK", int_t, 17, "Stick"),
        ], "Fit model types")
gen.add( "modelType", int_t, 0, "Model to fit", 0, 0, 17, edit_method=models)

methods = gen.enum([
        gen.const("SAC_RANSAC", int_t, 0, "RANSAC"),
        gen.const("SAC_LMEDS", int_t, 1, "LMEDS"),
        gen.const("SAC_MSAC", int_t, 2, "MSAC"),
        gen.const("SAC_RRANSAC", int_t, 3, "RRANSAC"),
        gen.const("SAC_RMSAC", int_t, 4, "RMSAC"),
        gen.const("SAC_MLESAC", int_t, 5, "MLESAC"),
        gen.const("SAC_PROSAC", int_t, 6, "PROSAC"),
        ], "Fit methods")
gen.add( "methodType", int_t, 0, "Method used for fit", 0, 0, 6,
        edit_method=methods)

gen.add("max_iterations", int_t, 0,
        "The maximum number of iterations the algorithm will run for",
        50, 0, 100000)
gen.add("probability", double_t, 0,
        "The desired probability of choosing at least one sample free from outliers",
        0.99, 0.5, 0.99)
gen.add("distance_threshold", double_t, 0,
        "The distance to model threshold", 0.02, 0, 1.0)
gen.add("optimize_coefficients", bool_t, 0,
        "Model coefficient refinement", True)
gen.add("radius_min", double_t, 0,
        "The minimum allowed model radius (where applicable)", 0.0, 0, 1.0)
gen.add("radius_max", double_t, 0,
        "The maximum allowed model radius (where applicable)", 0.05, 0, 1.0)
gen.add("eps_angle", double_t, 0,
        "The maximum allowed difference between the model normal and the given axis in radians.",
        0.17, 0.0, pi/2)
gen.add("min_inliers", int_t, 0,
        "The minimum number of inliers a model must have in order to be considered valid.",
        0, 0, 100000)
gen.add("input_frame", str_t, 0, "The input TF frame the data should be transformed into, if input.header.frame_id is different.", "")
gen.add("output_frame", str_t, 0, "The output TF frame the data should be transformed into, if input.header.frame_id is different.", "")

axis_group = gen.add_group("Axis")
axis_group.add("x", double_t, 0, "x component", 0.0, -1, 1);
axis_group.add("y", double_t, 0, "y component", 0.0, -1, 1);
axis_group.add("z", double_t, 0, "z component", 0.0, -1, 1);

exit(gen.generate("pcltools", "pcltools", "PlaneFit"))
