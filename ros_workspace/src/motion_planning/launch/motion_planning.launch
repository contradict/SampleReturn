<?xml version="1.0"?>
<!-- vim: set fenc=utf-8 et sts=4 ft=xml : -->
<launch>

    <arg name="odometry_frame" default="odom"/>
    <arg name="world_fixed_frame" default="map"/>
    
    <!--load the costmap node -->
    <include file="$(find samplereturn)/launch/costmap.launch"/>
        
    <node name="vfh_driver"
          pkg="motion_planning" 
          type="vfh_driving.py"
          machine="navigate"
          output="log"
          ns="/processes">

        <remap from="odometry" to="/motion/odometry"/>
        <remap from="local_costmap" to="/processes/local_costmap/costmap/costmap"/>
        <remap from="twist" to="/motion/planner_command"/>
        <remap from="platform_joint_state" to="/motion/platform_joint_state"/>
         
        <!-- remap parameter from costmap -->
        <remap from="inflation_radius" to="/processes/local_costmap/costmap/inflation_layer/inflation_radius"/>

        <!-- general params-->
        <param name="publish_debug" value="True"/><!-- this is a lot of stuff, turn it off when possible!-->
        <param name="odometry_frame" value="$(arg odometry_frame)"/>        
        <param name="goal_orientation_tolerance" value="2"/><!--degrees!-->
        <param name="goal_obstacle_radius" value="1.0"/><!--dist past goal to check obstacles-->
        <param name="clear_distance" value="4.0"/><!-- dist to move after rotating to clear -->
        <param name="clear_first_angle" value="120"/><!--spin this angle first to check for clear, then spin other way-->
        <param name="course_tolerance" value="6.0"/>

        <!--VFH algorithm parameters, angles in degrees -->
        <param name="active_window" value="120"/>
        <param name="sector_angle" value="5"/>
        <param name="min_obstacle_distance" value="0.2"/>
        <param name="max_obstacle_distance" value="6.0"/>
        <param name="u_goal" value="5.0"/><!--cost multiplier for angle from goal-->
        <param name="u_current" value="3.0"/><!--cost multiplier for angle from current angle-->
        <param name="lethal_threshold" type="int" value="90"/>
        <param name="threshold_high" value="2000"/>
        <param name="threshold_low" value="1000"/>

        <!-- shoehorned in crap for checking obstacles in search cam view -->        
        <param name="publish_search_area_check" value="False"/>                
        <param name="search_check_rate" value="10"/>
        <rosparam>
            search_check_points: 
                port: { x: 1.1, y: 1.67 }
                center: { x: 1.5, y: 0.0 }
                starboard: { x: 1.1, y: -1.67 }
        </rosparam>

        <!-- underlying motion params for the simple move inside vfh -->
        <rosparam>
            vfh_motion_params:
                max_velocity: 1.5
                acceleration: 0.5 
                stop_deceleration: 1.0
                loop_rate: 10 
                steering_angle_epsilon: 0.01
        </rosparam>

    </node>

    <node name="simple_driver"
          pkg="motion_planning" 
          type="simple_driving.py"
          machine="navigate"
          output="log"
          ns="/processes">

        <param name="odometry_frame" value="$(arg odometry_frame)"/>

        <remap from="odometry" to="/motion/odometry"/>
        <remap from="twist" to="/motion/planner_command"/>
        <remap from="platform_joint_state" to="/motion/platform_joint_state"/>
        
        <rosparam>
            simple_motion_params:
                max_velocity: 1.5
                acceleration: 0.3
                stop_deceleration: 1.0
                loop_rate: 10 
                steering_angle_epsilon: 0.01
        </rosparam>

    </node>
</launch>

