import os
import itertools

import ycm_core

flags = [
        '-Wall',
        '-Wextra',
        '-Werror',
        '-Wno-long-long',
        '-Wno-variadic-macros',
        '-Wno-unused-variable',
        '-Wno-unknown-pragmas',
        '-Wno-error=deprecated-declarations',
        '-fPIC',
        # THIS IS IMPORTANT! Without a "-std=<something>" flag, clang won't know
        # which
        # language to use when compiling headers. So it will guess. Badly. So
        # C++
        # headers will be compiled as C headers. You don't want that so ALWAYS
        # specify
        # a "-std=<something>".
        # For a C project, you would set this to something like 'c99' instead of
        # 'c++11'.
        '-std=c++11',
        # ...and the same thing goes for the magic -x option which specifies the
        # language that the files to be compiled are written in. This is mostly
        # relevant for c++ headers.
        # For a C project, you would set this to 'c' instead of 'c++'.
        '-x', 'c++',
        '-isystem', '/opt/ros/indigo/include',
        '-isystem', '/usr/include/python2.7',
        '-I', '/usr/local/opencv3/include',
        '-I', '/usr/include/eigen3',
        '-I', '/usr/include/pcl-1.7',
        '-I', '/usr/include/ni',
        '-I', '/usr/include/vtk-5.8',
        '-I', '/usr/include/qhull',
        '-I', '/usr/include/suitesparse',
        '-I', '/usr/local/cuda/include',
        '-I', '/usr/include/qt4',
        '-I', '/usr/include/qt4/QtGui',
        '-I', '/usr/include/qt4/QtCore',
        '-I', '/usr/src/gtest/include',
        '-I', '/usr/src/gtest',
        '-I', 'install/include',
        '-I', 'devel/include',
        '-I', 'src/beacon_finder/src/apriltags/apriltags-c/',
        '-I', 'src/beacon_finder/src/apriltags/apriltags-c/common',
        '-I', '/opt/ros/indigo/include/bfl',
]

def DirectoryOfThisScript():
  return os.path.dirname( os.path.abspath( __file__ ) )

#incdir="devel/include"
#flags += itertools.chain.from_iterable([("-I", os.path.join(incdir, x)) for x in os.listdir(incdir)])
srcdir=os.path.join(DirectoryOfThisScript(), "src")
if os.path.exists(srcdir):
    for d in os.listdir(srcdir):
        psrcdir = os.path.join(srcdir, d, "src")
        if os.path.exists(psrcdir):
            flags += ["-I", psrcdir]
        pincdir = os.path.join(srcdir, d, "include")
        if os.path.exists(pincdir):
            flags += ["-I", pincdir]

compilation_database_folder = ""

if os.path.exists( compilation_database_folder ):
  database = ycm_core.CompilationDatabase( compilation_database_folder )
else:
  database = None

SOURCE_EXTENSIONS = [ '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]


def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):
  if not working_directory:
    return list( flags )
  new_flags = []
  make_next_absolute = False
  path_flags = [ '-isystem', '-I', '-iquote', '--sysroot=' ]
  for flag in flags:
    new_flag = flag

    if make_next_absolute:
      make_next_absolute = False
      if not flag.startswith( '/' ):
        new_flag = os.path.join( working_directory, flag )

    for path_flag in path_flags:
      if flag == path_flag:
        make_next_absolute = True
        break

      if flag.startswith( path_flag ):
        path = flag[ len( path_flag ): ]
        new_flag = path_flag + os.path.join( working_directory, path )
        break

    if new_flag:
      new_flags.append( new_flag )
  return new_flags


def IsHeaderFile( filename ):
  extension = os.path.splitext( filename )[ 1 ]
  return extension in [ '.h', '.hxx', '.hpp', '.hh' ]


def GetCompilationInfoForFile( filename ):
  # The compilation_commands.json file generated by CMake does not have entries
  # for header files. So we do our best by asking the db for flags for a
  # corresponding source file, if any. If one exists, the flags for that file
  # should be good enough.
  if IsHeaderFile( filename ):
    basename = os.path.splitext( filename )[ 0 ]
    for extension in SOURCE_EXTENSIONS:
      replacement_file = basename + extension
      if os.path.exists( replacement_file ):
        compilation_info = database.GetCompilationInfoForFile(
          replacement_file )
        if compilation_info.compiler_flags_:
          return compilation_info
    return None
  return database.GetCompilationInfoForFile( filename )


def FlagsForFile( filename, **kwargs ):
  if database:
    # Bear in mind that compilation_info.compiler_flags_ does NOT return a
    # python list, but a "list-like" StringVec object
    compilation_info = GetCompilationInfoForFile( filename )
    if not compilation_info:
      return None

    final_flags = MakeRelativePathsInFlagsAbsolute(
      compilation_info.compiler_flags_,
      compilation_info.compiler_working_dir_ )

    # NOTE: This is just for YouCompleteMe; it's highly likely that your project
    # does NOT need to remove the stdlib flag. DO NOT USE THIS IN YOUR
    # ycm_extra_conf IF YOU'RE NOT 100% SURE YOU NEED IT.
    try:
      final_flags.remove( '-stdlib=libc++' )
    except ValueError:
      pass
  else:
    relative_to = DirectoryOfThisScript()
    final_flags = MakeRelativePathsInFlagsAbsolute( flags, relative_to )

  return {
    'flags': final_flags,
    'do_cache': True
  }
